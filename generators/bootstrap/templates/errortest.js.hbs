import React from 'react';
import { shallow, mount } from 'enzyme';

import ErrorBoundary from '../ErrorBoundary';

let render;
const Something = () => null;

beforeEach(() => {
  render = shallow(<ErrorBoundary />);
});

describe('<ErrorBoundary />', () => {
  it('should render its self', () => {
    expect(render).toHaveLength(1);
  });

  it('should render its children', () => {
    const children = <h1>Test</h1>;
    const renderedComponent = shallow(
      <ErrorBoundary>
        {children}
      </ErrorBoundary>,
    );
    expect(renderedComponent.contains(children)).toBe(true);
    expect(renderedComponent.find('h2').children).toHaveLength(1);
  });

  it('should has one of h2', () => {
    expect(render.find('h2').children).toHaveLength(1);
  });

  it('displays error message on error generated by child', () => {
    const wrapper = mount(
      <ErrorBoundary>
        <Something />
      </ErrorBoundary>,
    );

    const error = new Error('Doh!');

    wrapper.find(Something).simulateError(error);
    wrapper.setState({ hasError: true });
    expect(wrapper).toMatchSnapshot();
  });
});
